sudo: required
dist: trusty

os: linux
language: minimal

cache:
  apt: true
  ccache: true
  directories:
  - depends/built
  - depends/sdk-sources
  - $HOME/.ccache

stages:
  - lint
  - test

env:
  global:
    - MAKEJOBS=-j3
    - BUILD_ONLY_DEPENDS=false
    - RUN_TESTS=false
    - RUN_UNIT_TESTS=false
    - RUN_FUNCTIONAL_TESTS=false # Not Yet Implemented
    - RUN_BENCH=false  # Set to true for any one job that has debug enabled, to quickly check bench is not crashing or hitting assertions
    - DOCKER_NAME_TAG=ubuntu:18.04
    - OLD_DOCKER_NAME_TAG=ubuntu:16.04
    - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID
    - CCACHE_SIZE=500M
    - CCACHE_TEMPDIR=/tmp/.ccache-temp
    - CCACHE_COMPRESS=1
    - CCACHE_DIR=$HOME/.ccache
    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out
    - SDK_URL=https://bitcoincore.org/depends-sources/sdks
    - WINEDEBUG=fixme-all
    - DOCKER_PACKAGES="build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git ca-certificates ccache zip"
    - DEPLOY_TEST_BUILDS=true

before_install:
  - set -o errexit; source .travis/test_03_before_install.sh
install:
  - set -o errexit; source .travis/test_04_install.sh
before_script:
  - set -o errexit; source .travis/test_05_before_script.sh
script:
  - if [ $SECONDS -gt 1200 ]; then export DEPENDS_TIMEOUT="true" && export BUILD_ONLY_DEPENDS="true"; false; fi
  - if [ "$DEPENDS_TIMEOUT" != "true" ]; then set -o errexit; source .travis/test_06_script.sh; fi
after_script:
    - echo $TRAVIS_COMMIT_RANGE
    - echo $TRAVIS_COMMIT_LOG
jobs:
  include:
# lint stage
    - stage: lint
      env:
      sudo: false
      cache: false
      language: python
      python: '3.6'
      install:
        - set -o errexit; source .travis/lint_04_install.sh
      before_script:
        - set -o errexit; source .travis/lint_05_before_script.sh
      script:
        - set -o errexit; source .travis/lint_06_script.sh;
# ARM
    - stage: test
      env: >-
        REASON=ARM
        HOST=arm-linux-gnueabihf
        PACKAGES="python3 g++-arm-linux-gnueabihf"
        DEP_OPTS="NO_QT=1"
        RUN_UNIT_TESTS=false
        RUN_FUNCTIONAL_TESTS=false
        GOAL="install"
        BITCOIN_CONFIG="--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi --disable-tests"
# AArch64
    - stage: test
      env: >-
        REASON=AArch64
        HOST=aarch64-linux-gnu
        PACKAGES="python3 g++-aarch64-linux-gnu"
        DEP_OPTS="NO_QT=1"
        RUN_UNIT_TESTS=false
        RUN_FUNCTIONAL_TESTS=false
        GOAL="install"
        BITCOIN_CONFIG="--enable-glibc-back-compat --enable-reduce-exports --disable-tests"
# Win32
    - stage: test
      env: >-
        REASON=Win32
        HOST=i686-w64-mingw32
        DPKG_ADD_ARCH="i386"
        DEP_OPTS=""
        PACKAGES="python3 nsis g++-mingw-w64-i686 wine-binfmt wine32"
        GOAL="install"
        BITCOIN_CONFIG="--enable-reduce-exports --with-gui=qt5 --disable-tests"
# Win64
    - stage: test
      env: >-
        REASON=Win64
        HOST=x86_64-w64-mingw32
        DEP_OPTS=""
        PACKAGES="python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64"
        GOAL="install"
        BITCOIN_CONFIG="--enable-reduce-exports --with-gui=qt5 --disable-tests"
# Linux-32bit + dash NO QT
    - stage: test
      env: >-
        REASON=Linux-32bit
        HOST=i686-pc-linux-gnu
        PACKAGES="g++-multilib python3-zmq"
        DEP_OPTS="NO_QT=1"
        GOAL="install"
        CONFIG_SHELL="/bin/dash"
        BITCOIN_CONFIG="--enable-zmq --enable-glibc-back-compat --enable-reduce-exports --disable-tests LDFLAGS='-static-libstdc++ -static-libgcc' CFLAGS=-fPIC"
# Ubuntu 16.04 32-bit + dash - NO QT
    - stage: test
      env: >-
        REASON=Ubuntu-16.04-32bit
        DOCKER_NAME_TAG=ubuntu:16.04
        HOST=i686-pc-linux-gnu
        PACKAGES="g++-multilib bc python3-zmq"
        DEP_OPTS="NO_QT=1"
        GOAL="install"
        CONFIG_SHELL="/bin/dash"
        BITCOIN_CONFIG="--enable-zmq --enable-glibc-back-compat --enable-reduce-exports --disable-tests LDFLAGS='-static-libstdc++ -static-libgcc' CFLAGS=-fPIC"
# Linux-64bit - NO QT
    - stage: test
      env: >-
        REASON=Linux-64bit
        HOST=x86_64-unknown-linux-gnu
        PACKAGES="g++-multilib python3-zmq"
        DEP_OPTS="NO_QT=1 NO_UPNP=1"
        GOAL="install"
        BITCOIN_CONFIG="--enable-zmq --enable-glibc-back-compat --enable-reduce-exports --disable-tests LDFLAGS='-static-libstdc++ -static-libgcc' CFLAGS=-fPIC"
# Ubuntu 16.04 Linux NO QT
    - stage: test
      env: >-
        REASON=Ubuntu-16.04-64bit-noQT
        DOCKER_NAME_TAG=ubuntu:16.04
        HOST=x86_64-unknown-linux-gnu
        PACKAGES="bc python3-zmq g++-multilib"
        DEP_OPTS="NO_QT=1 NO_UPNP=1"
        GOAL="install"
        BITCOIN_CONFIG="--enable-zmq --enable-glibc-back-compat --enable-reduce-exports --disable-tests LDFLAGS='-static-libstdc++ -static-libgcc' CFLAGS=-fPIC"
# Linux-64bit (uses qt5 dev package instead of depends Qt to speed up build and avoid timeout)
    - stage: test
      env: >-
        REASON=Linux-64bit-QT
        HOST=x86_64-unknown-linux-gnu
        PACKAGES="python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev"
        DEP_OPTS="NO_QT=1 NO_UPNP=1 ALLOW_HOST_PACKAGES=1"
        GOAL="install"
        BITCOIN_CONFIG="--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --disable-tests LDFLAGS='-static-libstdc++ -static-libgcc' CFLAGS=-fPIC"
# Linux-64bit Full QT
#    - stage: test
#      env: >-
#        REASON=Linux-64bit-FullQT
#        HOST=x86_64-unknown-linux-gnu
#        PACKAGES="python3-zmq protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev libfreetype6-dev libfontconfig1-dev"
#        DEP_OPTS="NO_UPNP=1 DEBUG=1"
#        GOAL="install"
#        BITCOIN_CONFIG="--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --disable-tests"
# Ubuntu 16.04 Linux (uses qt5 dev package instead of depends Qt to speed up build and avoid timeout)
    - stage: test
      env: >-
        REASON=Ubuntu-16.04-64bit-withQT
        DOCKER_NAME_TAG=ubuntu:16.04
        HOST=x86_64-unknown-linux-gnu
        PACKAGES="bc python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev libproxy-dev python-gobject-2-dev libpng12-dev libicu-dev"
        DEP_OPTS="NO_QT=1 NO_UPNP=1 ALLOW_HOST_PACKAGES=1"
        GOAL="install"
        BITCOIN_CONFIG="--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --disable-tests LDFLAGS='-static-libstdc++ -static-libgcc' CFLAGS=-fPIC"
# Ubuntu-18.04-64bit-ND (no depends, only system libs)
#    - stage: test
#      env: >-
#        REASON=Ubuntu-18.04-64bit-ND
#        HOST=x86_64-unknown-linux-gnu
#        PACKAGES="python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev libgmp-dev"
#        NO_DEPENDS=1
#        GOAL="install"
#        BITCOIN_CONFIG="--enable-zmq --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --with-gui=qt5 --disable-tests LDFLAGS='-static-libstdc++ -static-libgcc' CFLAGS=-fPIC"
# Ubuntu-16.04-64bit-ND (no depends, only system libs)
#    - stage: test
#      env: >-
#        REASON=Ubuntu-16.04-64bit-ND
#        DOCKER_NAME_TAG=ubuntu:16.04
#        HOST=x86_64-unknown-linux-gnu
#        PACKAGES="python3-zmq qtbase5-dev qttools5-dev-tools libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev libgmp-dev"
#        NO_DEPENDS=1
#        GOAL="install"
#        BITCOIN_CONFIG="--enable-zmq --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --with-gui=qt5 --disable-tests LDFLAGS='-static-libstdc++ -static-libgcc' CFLAGS=-fPIC"
# x86_64 Linux (sanitizers)
#    - stage: test
#      env: >-
#        HOST=x86_64-unknown-linux-gnu
#        PACKAGES="clang python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev libgmp-dev"
#        NO_DEPENDS=1
#        RUN_BENCH=true
#        RUN_FUNCTIONAL_TESTS=false # Disabled for now, can be combined with the other x86_64 linux NO_DEPENDS job when functional tests pass the sanitizers
#        GOAL="install"
#        BITCOIN_CONFIG="--enable-zmq --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --with-gui=qt5 --with-sanitizers=undefined CC=clang CXX=clang++"
# Cross-Mac
    - stage: test
      env: >-
        REASON=MacOS
        HOST=x86_64-apple-darwin14
        PACKAGES="cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev python3-setuptools-git"
        OSX_SDK=10.11
        RUN_UNIT_TESTS=false
        RUN_FUNCTIONAL_TESTS=false
        GOAL="all deploy"
        BITCOIN_CONFIG="--enable-gui --enable-reduce-exports --enable-werror --disable-tests"
deploy:
  provider: releases
  api_key:
    secure: Pwhnh95/9SAGyOfjJYA2auIXOKjETkKx3W1yLsoOAHx5RpOkVRUpMbyKnYDexaYsKsw5BQiJZaqnFRIrpVp25Li8VeBAdQqeFbNrIIRvloVYIj+3mGYkN8j5EX5H0N8ZhEp/WaFD1n3/e2Eo6AQEP0sAUTfVmD3nilIfZUBLusu6sfDGC3jEbPDuF09ceRd+yhtD3yY7AJ0psycta2vsNmd60LIbil5fRPi0RduCOxU63Chyn6CwIuEtadhCEqP8VG/rXbOReoFrCf0TdG17XUNpSle7/MAEf/wIiO2UG6XpwfEX1IPdsCRc4ohpK2KK9aXWGq0dc22gBRtzaHoeL9VFCP8B6RZXTD2EQ2CNRtYIhJ38m5s7GImME3w5hCwq5tozh7tG1kUuPkMewDJHaWEySBlnQDsawVmSdvYw+8ckNgK7Mx+PZcFRgNod+OsHzyB/Sm9rJeEeEusbXgu+o2i12wd1wd1jKjxgesm77B2FMhPU5xkAFc81mC2Fm4QKhdLCJdIOx//qNsXkElb4dWhi8R1cXqOf8HM5yei786KEYWcRQFBwIYwLK0bDi4BOP/9hfXeYnhfnAU8C4ZbZ71VR8alxeM97qDsgz6IHcCJeZy2eKE0t7JZinMSvQ04pwg/Ma5U87P3Fnk0/Vi8SBhFxjLg2f5Jy2LjSsgVFWaE=
  file_glob: true
  file:
    - $OUTDIR/*.dmg
    - $OUTDIR/*.zip
  skip_cleanup: true
  on:
    tags: true
    repo: UCCNetwork/ucc